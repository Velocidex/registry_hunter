Preamble:
  # Fetch all the values under the key specified in OSPath as a dict
  # with key being the value name, and value being the value.
  - |
    LET FetchKeyValues(OSPath) = to_dict(item={
      SELECT Name AS _key, Data.value AS _value
      FROM glob(globs="*", accessor="registry", root=OSPath)
    })

  # Similar to FetchKeyValues() but also allows a regular expression
  # to select only some desired values.
  - |
    LET FetchKeyValuesWithRegex(OSPath, Regex) = to_dict(item={
      SELECT Name AS _key, Data.value AS _value
      FROM glob(globs="*", accessor="registry", root=OSPath)
      WHERE Name =~ Regex
    })

  # Convert from a numeric protocol id to a name.
  - |
    LET _ProtocolLookup <= dict(`6`="TCP", `17`="UDP")
    LET ProtocolLookup(X) = get(item=_ProtocolLookup, field=X) || X

  # A general purpose function to get the value in OSPath
  - |
    LET GetValue(OSPath) = stat(filename=OSPath, accessor="registry").Data.value

  # Calculates simple MRU keys. These contain simple lists of indexes
  # in the MRUList value (e.g. "cabd") which reference the relevant
  # values in the specified order.
  - |
    LET CalculateMRU(OSPath) = SELECT GetValue(OSPath=OSPath + g1) AS value
        FROM parse_records_with_regex(accessor="data",
        file=GetValue(OSPath=OSPath + "MRUList") || "", regex="(.)")

  # Resolve the SID to a name based on the registry profile (i.e. does
  # not use lookupSID() which depends on running live on the system).
  - |
    LET ResolveSID(SID) = pathspec(parse=stat(accessor="registry",
        filename="HKEY_LOCAL_MACHINE/Software/Microsoft/Windows NT/CurrentVersion/ProfileList/" + SID + "/ProfileImagePath").Data.value).Basename

  - |
    LET FormatMAC(x) = parse_binary(accessor="data",
      filename=x, profile='''
      [["X", 0, [
        ["x0", 0, "uint8"],
        ["x1", 1, "uint8"],
        ["x2", 2, "uint8"],
        ["x3", 3, "uint8"],
        ["x4", 4, "uint8"],
        ["x5", 5, "uint8"],
        ["mac", 0, Value, {"value": "x=>format(format='%02x:%02x:%02x:%02x:%02x:%02x', args=[x.x0, x.x1, x.x2, x.x3, x.x4, x.x5])"}]
      ]]]
      ''', struct="X").mac

  - |
    LET RemoveNullDictValue(D) = to_dict(item={
       SELECT * FROM items(item=D)
       WHERE _value
    })

  # Try to parse the path into something resembling the binary.
  # Sometimes we see things like "\SystemRoot\System32\..." which
  # should be expanded into "%SystemRoot%\System32"
  - LET ExpandPath(Path) = commandline_split(
    command=expand(path=regex_transform(source=Path,
      map=dict(
        `^\\\\SystemRoot\\\\`="%SystemRoot%\\"
      ))))[0]

Rules:
- Description: Interface Properties (IPv4)
  Category: System Info
  Glob: CurrentControl*\Services\Tcpip\Parameters\Interfaces\*
  Root: HKEY_LOCAL_MACHINE\System
  Details: |
    x=>FetchKeyValuesWithRegex(OSPath=x.OSPath, Regex="AddressType|DhcpConnForceBroadcastFlag|DhcpDefaultGateway|DhcpDomain|DhcpDomainSearchList|DhcpGatewayHardware|DhcpGatewayHardwareCount|DhcpIPAddress|DhcpNameServer|DhcpServer|DhcpSubnetMask|DhcpSubnetMaskOpt|Domain|EnableDHCP|EnableMulticast|IPAddress|IsServerNapAware|Lease}LeaseObtainedTime|LeaseTerminatesTime|NameServer|RegisterAdapterName|RegistrationEnabled|SubnetMask|T1|T2") + dict(
       LeaseObtainedTime=timestamp(epoch=GetValue(OSPath=x.OSPath + "LeaseObtainedTime")),
       LeaseTerminatesTime=timestamp(epoch=GetValue(OSPath=x.OSPath + "LeaseTerminatesTime")),
       DhcpGatewayHardware=FormatMAC(x=GetValue(OSPath=x.OSPath + "DhcpGatewayHardware") || ""),
       T1=timestamp(epoch=GetValue(OSPath=x.OSPath + "T1")),
       T2=timestamp(epoch=GetValue(OSPath=x.OSPath + "T2"))
    )
  Filter: x=>IsDir

- Description: Interface Properties (IPv6)
  Category: System Info
  Glob: CurrentControl*\Services\Tcpip6\Parameters\Interfaces\*
  Root: HKEY_LOCAL_MACHINE\System
  Details: |
    x=>FetchKeyValuesWithRegex(OSPath=x.OSPath, Regex="AddressType|DhcpConnForceBroadcastFlag|DhcpDefaultGateway|DhcpDomain|DhcpDomainSearchList|DhcpGatewayHardware|DhcpGatewayHardwareCount|DhcpIPAddress|DhcpNameServer|DhcpServer|DhcpSubnetMask|DhcpSubnetMaskOpt|Domain|EnableDHCP|EnableMulticast|IPAddress|IsServerNapAware|Lease}LeaseObtainedTime|LeaseTerminatesTime|NameServer|RegisterAdapterName|RegistrationEnabled|SubnetMask|T1|T2") + dict(
       LeaseObtainedTime=timestamp(epoch=GetValue(OSPath=x.OSPath + "LeaseObtainedTime")),
       LeaseTerminatesTime=timestamp(epoch=GetValue(OSPath=x.OSPath + "LeaseTerminatesTime"))
    )
  Filter: x=>IsDir


- Author: Troyla
  Description: Regedit.exe Last Run
  Category: Executables
  Glob: '*\Software\Microsoft\Windows\CurrentVersion\Applets\Regedit'
  Root: HKEY_USERS
  Details: x=>x.Mtime

- Author: Troyla
  Description: Regedit.exe Last Key Viewed
  Category: Executables
  Glob: '*\Software\Microsoft\Windows\CurrentVersion\Applets\Regedit\LastKey'
  Root: HKEY_USERS

- Description: "WinLogon: Displays the details of the last user logged in to this system"
  Category: System Info
  Glob: Microsoft\Windows NT\CurrentVersion\WinLogon
  Filter: x=>true
  Details: |
    x=>FetchKeyValuesWithRegex(OSPath=x.OSPath, Regex="AutoLogonSID|LastUsedUsername|AutoAdminLogon|DefaultUserName|DefaultPassword") + dict(AllValues=FetchKeyValues(OSPath=x.OSPath))

  Root: HKEY_LOCAL_MACHINE\Software

- Description: "LogonUI: Displays the last logged on SAM user"
  Category: System Info
  Root: HKEY_LOCAL_MACHINE\Software
  Glob: Microsoft\Windows\CurrentVersion\Authentication\LogonUI
  Filter: x=>true
  Details: |
    x=>FetchKeyValuesWithRegex(OSPath=x.OSPath, Regex="LastLoggedOnUser|LastLoggedOnSAMUser|LastLoggedOnDisplayName|SelectedUserSID|LastLoggedOnUserSID") + dict(AllValues=FetchKeyValues(OSPath=x.OSPath))

- Description: System Info (Current)
  Category: System Info
  Root: HKEY_LOCAL_MACHINE\Software
  Glob: Microsoft\Windows NT\CurrentVersion
  Filter: x=>true
  Details: |
    x=>FetchKeyValuesWithRegex(OSPath=x.OSPath, Regex="SystemRoot|RegisteredOwner|RegisteredOrganization|DisplayVersion|ComputerName|ProductName|InstallDate|InstallationType|CurrentMajorVersionNumber|EditionID|CurrentBuildNumber|CurrentBuild|CompositionEditionID|BuildLab")

- Description: System Info (Historical)
  Category: System Info
  Root: HKEY_LOCAL_MACHINE\System
  Glob: Setup\Source OS*
  Filter: x=>IsDir
  Details: |
    x=>FetchKeyValuesWithRegex(OSPath=x.OSPath, Regex="SystemRoot|RegisteredOwner|RegisteredOrganization|DisplayVersion|ComputerName|ProductName|InstallDate|InstallationType|CurrentMajorVersionNumber|EditionID|CurrentBuildNumber|CurrentBuild|CompositionEditionID|BuildLab")

- Description: Firewall Rules
  Category: System Info
  Root: HKEY_LOCAL_MACHINE\System
  Glob: ControlSet001\Services\SharedAccess\Parameters\FirewallPolicy\FirewallRules\*
  Preamble:
  - |
    LET _ParseFirewallRule(X) = to_dict(item={
       SELECT split(string=_value, sep_string="=")[0] AS _key,
              split(string=_value, sep_string="=")[1] AS _value
       FROM foreach(row=split(string=X, sep_string='|'))
       WHERE NOT _key =~ "^v"
    })

    LET MaybeEnrichFirewallRule(OSPath, Details) = if(condition=Details.App,
    then=Details + GetDetails(OSPath=ExpandPath(Path=Details.App)), else=Details)

    LET ParseFirewallRule(X) = MaybeEnrichFirewallRule(
       OSPath=OSPath, Details=_ParseFirewallRule(X=X)) +
       dict(Protocol=ProtocolLookup(X=_ParseFirewallRule(X=X).Protocol))

  Details: |
    x=>ParseFirewallRule(X=x.Data) + dict(RuleName=x.OSPath.Basename)

- Description: Microphone
  Category: Devices
  Root: HKEY_LOCAL_MACHINE\Software
  Glob: Microsoft\Windows\CurrentVersion\CapabilityAccessManager\ConsentStore\microphone
  Filter: x=>IsDir
  Details: |
    x=>dict(
      LastUsedTimeStart=FILETIME(t=GetValue(OSPath=x.OSPath + "LastUsedTimeStart")),
      LastUsedTimeStop=FILETIME(t=GetValue(OSPath=x.OSPath + "LastUsedTimeStop"))
    )

- Description: Webcam
  Category: Devices
  Root: HKEY_LOCAL_MACHINE\Software
  Glob: Microsoft\Windows\CurrentVersion\CapabilityAccessManager\ConsentStore\webcam\**
  Filter: x=>IsDir
  Details: |
    x=>dict(
      LastUsedTimeStart=FILETIME(t=GetValue(OSPath=x.OSPath + "LastUsedTimeStart")),
      LastUsedTimeStop=FILETIME(t=GetValue(OSPath=x.OSPath + "LastUsedTimeStop"))
    )

- Author: Andrew Rathbun
  Description: "JumplistData: Displays last execution time of a program"
  Category: Program Execution
  Glob: '*\Software\Microsoft\Windows\CurrentVersion\Search\JumplistData\*'
  Root: HKEY_USERS
  Details: |
    x=>dict(Program=x.OSPath.Basename, LastExecutionTime=FILETIME(t=x.Data))

- Author: Andrew Rathbun
  Description: "RunMRU: Tracks commands from the Run box in the Start menu, lower MRU # (Value Data3) = more recent"
  Category: Program Execution
  Root: HKEY_USERS
  Glob: '*\Software\Microsoft\Windows\CurrentVersion\Explorer\RunMRU'
  Filter: x=>IsDir
  Details: |
    x=>dict(MRU=CalculateMRU(OSPath=x.OSPath).value,
            All=FetchKeyValues(OSPath=x.OSPath))

- Author: Andrew Rathbun
  Description: CIDSizeMRU
  Category: Program Execution
  Root: HKEY_USERS
  Glob: '*\Software\Microsoft\Windows\CurrentVersion\Explorer\ComDlg32\CIDSizeMRU'
  Filter: x=>IsDir
  Preamble:
  - |
    LET MRUProfile <= '''
    [["Header", 0, [
       ["Array", 0, "Array", {
          "count": 500,
          "sentinel": "x=>NOT x",
          "type": "int32"
        }]
    ]]]
    '''

    LET CalculateMRUEx(OSPath) = SELECT split(string=utf16(string=GetValue(OSPath=OSPath + str(str=_value))), sep='\x00')[0] AS value
    FROM foreach(row=parse_binary(
           profile=MRUProfile,
           accessor="data",
           filename=GetValue(OSPath=OSPath + "MRUListEx") || "",
           struct="Header").Array)
    WHERE _value > 0

  Details: |
    x=>dict(MRU=CalculateMRUEx(OSPath=x.OSPath).value)

- Author: Andrew Rathbun
  Description: Background Activity Moderator (BAM)
  Category: Program Execution
  Root: HKEY_LOCAL_MACHINE\System
  Glob: 'ControlSet*\Services\BAM\State\UserSettings\*'
  Filter: x=>IsDir
  Preamble:
  - |
    LET _BAMPrograms(Root) = SELECT OSPath.Basename AS Program,
      timestamp(winfiletime=parse_binary(accessor="data",
          filename=Data.value, struct="uint64")) AS Timestamp
    FROM glob(accessor="registry", globs="*", root=Root)
    WHERE NOT Program =~ "^(Version|Sequence)"

  Details: |
    x=>dict(Programs=_BAMPrograms(Root=x.OSPath),
            UserSID=x.OSPath.Basename,
            Username=ResolveSID(SID=x.OSPath.Basename))

- Author: Andrew Rathbun, Mike Cohen
  Description: Desktop Activity Moderator (DAM)
  Category: Program Execution
  Root: HKEY_LOCAL_MACHINE\System
  Glob: 'ControlSet*\Services\DAM\State\UserSettings\*'
  Filter: x=>IsDir
  Details: |
    x=>dict(Programs=_BAMPrograms(Root=x.OSPath),
            UserSID=x.OSPath.Basename,
            Username=ResolveSID(SID=x.OSPath.Basename))

- Author: Andrew Rathbun, Mike Cohen
  Description: "UserAssist: GUI-based programs launched from the desktop"
  Category: Program Execution
  Root: HKEY_USERS
  Glob: '*\Software\Microsoft\Windows\CurrentVersion\Explorer\UserAssist\*\Count\*'
  Preamble:
  - |
    LET userAssistProfile = '''
      [
        ["Header", 0, [
          ["NumberOfExecutions", 4, "uint32"],
          ["LastExecution", 60, "WinFileTime", {"type":"uint64"}]
        ]]
      ]
    '''

    LET _ExtractUserAssist(Data) = parse_binary(accessor="data",
                      filename=Data,
                      profile=userAssistProfile, struct="Header")

  Details: |
    x=>dict(Program=rot13(string=x.OSPath.Basename),
            NumberOfExecutions=_ExtractUserAssist(OSPath=x.Data).NumberOfExecutions,
            LastExecutionTime=_ExtractUserAssist(OSPath=x.Data).LastExecution)

- Author: Andrew Rathbun, Mike Cohen
  Description: "RADAR: Displays applications that were running at one point in time on this system"
  Category: Program Execution
  Root: HKEY_LOCAL_MACHINE\Software
  Glob: 'Microsoft\RADAR\HeapLeakDetection\DiagnosedApplications'
  Filter: x=>IsDir
  Preamble:
    - |
      LET _RADAR(OSPath) = SELECT OSPath.Basename AS Program,
         timestamp(winfiletime=GetValue(OSPath=OSPath + "LastDetectionTime")) AS LastDetectionTime
      FROM glob(accessor="registry", globs='*', root=OSPath)

  Details: |
    x=>dict(Programs=_RADAR(OSPath=x.OSPath))

- Author: Andrew Rathbun, Mike Cohen
  Description: "WordWheelQuery: User Searches"
  Category: User Activity
  Root: HKEY_USERS
  Glob: '*\Software\Microsoft\Windows\CurrentVersion\Explorer\WordWheelQuery'
  Filter: x=>IsDir
  Details: |
    x=>dict(MRU=CalculateMRUEx(OSPath=x.OSPath).value)

- Author: Andrew Rathbun, Mike Cohen
  Description: "OpenSavePidlMRU: Tracks files that have been opened or saved within a Windows shell dialog box"
  Category: User Activity
  Root: HKEY_USERS
  Glob: '*\Software\Microsoft\Windows\CurrentVersion\Explorer\ComDlg32\OpenSavePidlMRU'
  Filter: x=>IsDir
  Details: |
    x=>dict(MRU=CalculateMRUEx(OSPath=x.OSPath).value)

- Author: Andrew Rathbun, Mike Cohen
  Description: "OpenSaveMRU: Tracks files that have been opened or saved within a Windows shell dialog box"
  Category: User Activity
  Root: HKEY_USERS
  Glob: '*\Software\Microsoft\Windows\CurrentVersion\Explorer\ComDlg32\OpenSaveMRU'
  Filter: x=>IsDir
  Details: |
    x=>dict(MRU=CalculateMRUEx(OSPath=x.OSPath).value)

- Author: Andrew Rathbun, Mike Cohen
  Description: "LastVisitedPidlMRU: Tracks the specific executable used by an application to open the files documented in OpenSavePidlMRU"
  Category: User Activity
  Root: HKEY_USERS
  Glob: '*\Software\Microsoft\Windows\CurrentVersion\Explorer\ComDlg32\LastVisitedPidlMRU'
  Filter: x=>IsDir
  Details: |
    x=>dict(MRU=CalculateMRUEx(OSPath=x.OSPath).value)

- Author: Andrew Rathbun, Mike Cohen
  Description: "RecentDocs: Files recently opened from Windows Explorer"
  Category: User Activity
  Root: HKEY_USERS
  Glob: '*\Software\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs'
  Filter: x=>IsDir
  Details: |
    x=>dict(MRU=CalculateMRUEx(OSPath=x.OSPath).value)

- Author: Andrew Rathbun, Mike Cohen
  Description: "Recent File List: Displays recent files accessed by the user with an application"
  Category: User Activity
  Root: HKEY_USERS
  Glob: '*\Software\*\*\Recent File List'
  Filter: x=>IsDir
  Preamble:
    - |
      LET _RecentFileList(OSPath) = SELECT Data.value AS F
      FROM glob(accessor="registry", globs='*', root=OSPath)
      WHERE OSPath.Basename =~ "File"

  Details: |
    x=>dict(Files=_RecentFileList(OSPath=x.OSPath).F)

- Author: Andrew Rathbun, Mike Cohen
  Description: "Recent Folder List: Displays recent folders accessed by the user with an application"
  Category: User Activity
  Root: HKEY_USERS
  Glob: '*\Software\*\*\Recent Folder List'
  Filter: x=>IsDir
  Details: |
    x=>dict(Files=_RecentFileList(OSPath=x.OSPath).F)

- Author: Andrew Rathbun, Mike Cohen
  Description: "Recent Document List: Displays recent Documents accessed by the user with an application"
  Category: User Activity
  Root: HKEY_USERS
  Glob: '*\Software\*\*\Settings\Recent Document List'
  Filter: x=>IsDir
  Details: |
    x=>dict(Files=_RecentFileList(OSPath=x.OSPath).F)

- Author: Andrew Rathbun, Mike Cohen
  Description: "Recent"
  Category: User Activity
  Root: HKEY_USERS
  Glob: '*\Software\Microsoft\*\*\Recent'
  Filter: x=>IsDir
  Details: |
    x=>dict(Files=_RecentFileList(OSPath=x.OSPath).F)

- Author: Andrew Rathbun, Mike Cohen
  Description: "RecentFind"
  Category: User Activity
  Root: HKEY_USERS
  Glob: '*\Software\Microsoft\*\*\RecentFind'
  Filter: x=>IsDir
  Details: |
    x=>dict(Files=_RecentFileList(OSPath=x.OSPath).F)

- Author: Andrew Rathbun, Mike Cohen
  Description: "User Shell Folders: Displays where a user's Shell folders are mapped to"
  Category: User Activity
  Root: HKEY_USERS
  Glob: '*\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders'
  Filter: x=>IsDir
  Details: |
    x=>FetchKeyValues(OSPath=x.OSPath)


- Author: Andrew Rathbun, Mike Cohen
  Description: "FeatureUsage: Displays the number of times the user has received a notification for an application"
  Category: User Activity
  Root: HKEY_USERS
  Glob: '*\Software\Microsoft\Windows\CurrentVersion\Explorer\FeatureUsage'
  Filter: x=>IsDir
  Preamble:
    - |
      LET _FeatureUsage(OSPath) = SELECT OSPath.Basename AS Application,
          Data.value AS Number
      FROM glob(accessor="registry", globs='*', root=OSPath)
  Details: |
    x=>dict(AppBadgeUpdated= _FeatureUsage(OSPath=x.OSPath + "AppBadgeUpdated"),
            AppLaunch=_FeatureUsage(OSPath=x.OSPath + "AppLaunch"),
            AppSwitched=_FeatureUsage(OSPath=x.OSPath + "AppSwitched"),
            ShowJumpView=_FeatureUsage(OSPath=x.OSPath + "ShowJumpView"),
            TrayButtonClicked=FetchKeyValues(OSPath=x.OSPath + "TrayButtonClicked"))

- Author: Andrew Rathbun, Mike Cohen
  Description: "Terminal Server Client (RDP): Displays the IP addresses/hostnames of devices this system has connected to (Outbound RDP)"
  Category: User Activity
  Root: HKEY_USERS
  Glob: '*\Software\Microsoft\Terminal Server Client'
  Filter: x=>IsDir
  Preamble:
    - |
      LET RDPMRU(OSPath) = SELECT Data.value AS Server
      FROM glob(accessor="registry", globs='*', root=OSPath + "Default")
      WHERE OSPath.Basename =~ "MRU"

  Details: |
    x=>dict(
     DefaultMRU=RDPMRU(OSPath=OSPath).Server,
     Servers={
      SELECT OSPath.Basename AS Server, Mtime,
        FetchKeyValues(OSPath=OSPath) AS Details
      FROM glob(accessor="registry", globs='*', root=OSPath + "Servers")
    })

- Author: Andrew Rathbun, Mike Cohen
  Description: "Run (Group Policy)"
  Category: Autoruns
  Root: HKEY_LOCAL_MACHINE\Software
  Glob: 'Microsoft\Windows\CurrentVersion\Policies\Explorer\Run*'
  Filter: x=>IsDir AND Details
  Details: |
    x=>FetchKeyValues(OSPath=x.OSPath)

- Author: Andrew Rathbun, Mike Cohen
  Description: "Run (NTUSER)"
  Category: Autoruns
  Root: HKEY_USERS
  Glob: '*\Software\Microsoft\Windows\CurrentVersion\Run*'
  Filter: x=>IsDir AND Details
  Details: |
    x=>FetchKeyValues(OSPath=x.OSPath)

- Author: Andrew Rathbun, Mike Cohen
  Description: "Run (SYSTEM)"
  Category: Autoruns
  Root: HKEY_LOCAL_MACHINE\Software
  Glob: 'Microsoft\Windows\CurrentVersion\Run*'
  Filter: x=>IsDir AND Details
  Preamble:
  - LET EnumerateRunKey(OSPath) = SELECT Name,
        Data.value AS RawTarget,
        ExpandPath(Path=Data.value) AS CommandImage,
        GetDetails(OSPath=ExpandPath(Path=Data.value)) AS Details
    FROM glob(accessor="registry", globs="*", root=OSPath)
    WHERE NOT IsDir

  Details: |
    x=>EnumerateRunKey(OSPath=x.OSPath)

- Author: Andrew Rathbun, Mike Cohen
  Description: Scheduled Tasks (TaskCache)
  Category: Autoruns
  Root: HKEY_LOCAL_MACHINE\Software
  Glob: Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tasks
  Filter: x=>IsDir AND Details
  # https://cyber.wtf/2022/06/01/windows-registry-analysis-todays-episode-tasks/
  Preamble:
  - |
    LET _ParseActions(Data)  = parse_binary(accessor="data",
                filename=Data, struct="Header",
                profile='''
    [["Header", 0, [
     ["__Ver", 0, "uint16"],
     ["__UserLen", 2, "uint32"],
     ["User", 6, "String", {length: "x=>x.__UserLen", encoding: "utf16"}],
     ["__ActionType", "x=>6 + x.__UserLen", "uint16"],
     ["ActionType", "x=>6 + x.__UserLen", "Enumeration", {
        type: "uint32",
        choices: {
          "26214": "BinaryAction",
          "30583": "ComHanlder",
          "34952": "Email",
          "39321": "MessageBox",
        }
     }],
     ["Action", "x=>6 + x.__UserLen + 2", "Union", {
       selector: "x=>x.__ActionType",
       choices: {
         "26214": BinaryAction,
         "30583": ComHandler,
       }
     }],
    ]],
    ["ComHandler", 0, [
     ["ClassID", 4, "GUID"],
     ["__DataLen", 20, uint32],
     ["Data", 24, "String", {
       "length": "x=>x.__DataLen",
       "encoding": "utf16",
     }]
    ]],
    ["GUID", 16, [
     ["__D1", 0, "uint32"],
     ["__D2", 4, "uint16"],
     ["__D3", 6, "uint16"],
     ["__D4", 8, "String", {"term": "", "length": 2}],
     ["__D5", 10, "String", {"term": "", "length": 6}],
     ["Value", 0, "Value", {
        "value": "x=>format(format='{%08x-%04x-%04x-%02x-%02x}', args=[x.__D1, x.__D2, x.__D3, x.__D4, x.__D5])"
    }]
    ]],
    ["BinaryAction", 0, [
     ["__BinLen", 4, "uint32"],
     ["Binary", 8, "String", {length: "x=>x.__BinLen", encoding: "utf16"}],
    ]]]
    ''')

    LET _ParseDynamicInfo(Data) = parse_binary(accessor="data",
                filename=Data, struct="Header",
                profile='''
    [["Header", 0, [
     ["__Ver", 0, "uint16"],
     ["Created", 4, "WinFileTime", {"type": "uint64"}],
     ["LastStart", 12, "WinFileTime", {"type": "uint64"}],
     ["LastStop", 20, "WinFileTime", {"type": "uint64"}],
     ["TaskState", 28, "uint32"],
     ["LastErrorCode", 32, "uint32"],
     ["LastSuccessfulRun", 36, "WinFileTime", {"type": "uint64"}],
    ]]]
    ''')

    LET _TaskCache(OSPath) = SELECT to_dict(item={
      SELECT OSPath.Basename AS _key,
        if(condition= OSPath.Basename =~ "DynamicInfo",
           then=_ParseDynamicInfo(Data=Data.value),
        else= if(condition= OSPath.Basename =~ "Actions",
           then=_ParseActions(Data=Data.value),
        else=Data.value)) AS _value
      FROM glob(accessor="registry", globs='*', root=OSPath)
    }) + dict(OSPath=OSPath) AS Details
    FROM glob(accessor="registry", globs='*', root=OSPath)
  Details: |
    x=>dict(Tasks= _TaskCache(OSPath=x.OSPath))


- Author: Andrew Rathbun, Mike Cohen
  Description: "Services: Displays list of services running on this computer"
  Category: Services
  Root: HKEY_LOCAL_MACHINE\System
  Glob: 'ControlSet*\Services\*'
  Filter: x=>IsDir
  Preamble:
    - |
      LET _ServiceTypeLookup <= dict(`1`="KernelDriver", `2`="FileSystemDriver", `4`="Adapter", `8`="RecognizerDriver", `16`="Win32OwnProcess", `32`="Win32ShareProcess", `256`="InteractiveProcess", `96`="Win32ShareProcess")
      LET _ServiceStartModeLookup <= dict(`0`="Boot", `1`="System", `2`="Automatic", `3`="Manual", `4`="Disabled")

      LET MaybeEnrichService(OSPath, Details) = if(condition=Details.ImagePath,
       then=Details + GetDetails(OSPath=ExpandPath(Path=Details.ImagePath)),
       else=Details)

      LET _ServicesInfo(OSPath) = MaybeEnrichService(OSPath=OSPath, Details=
          FetchKeyValuesWithRegex(OSPath=OSPath,
               Regex="Description|DisplayName|ServiceDll|Group|ImagePath|RequiredPrivileges|Type|Parameters|SERVICEDLL") +
          dict(Mtime=Mtime, Service=OSPath.Basename,
               TypeName=get(item=_ServiceTypeLookup, field=str(str=GetValue(OSPath=OSPath + "Type"))),
               StartName=get(item=_ServiceStartModeLookup, field=str(str=GetValue(OSPath=OSPath + "Start")))
          ))

  Details: |
    x=>_ServicesInfo(OSPath=x.OSPath)

- Description: Environment Variables
  Category: System Info
  Root: HKEY_LOCAL_MACHINE\System
  Glob: ControlSet*\Control\Session Manager\Environment
  Filter: x=>IsDir
  Details: x=>FetchKeyValues(OSPath=x.OSPath)

- Description: Environment Variables
  Category: System Info
  Root: HKEY_USERS
  Glob: '*\Environment'
  Filter: x=>IsDir
  Details: x=>FetchKeyValues(OSPath=x.OSPath)

- Description: Exploit Guards MitigationOptions
  Author: "@bmcdermott-r7 Blake McDermott"
  Category: System Info
  Comment: |
    Parses Exploit Guards MitigationOptions to see what security
    controls are enabled for each process, and returns them in a 15
    digit hexidecimal value.
  Reference: |
    https://theryuu.github.io/ifeo-mitigationoptions.txt
  Root: HKEY_LOCAL_MACHINE\Software
  Glob: "Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\*\\MitigationOptions"
  Preamble:
    - |
      LET ParseMitigationOptions(H) = RemoveNullDictValue(D=dict(
       DEP=
         (H[-1:] = "1" && "Always On") ||
         (H[-1:] = "2" && "Always On - enable ATL thunk emulation"),
       SEHOP=(H[-2:-1] = "1"),
       ASLR=
          (H[-3:-2] = "1" && "Enable force relocate.") ||
          (H[-3:-2] = "2" && "Force relocate off.") ||
          (H[-3:-2] = "3" && "Force relocate always on."),
       `Heap terminate`=
          (H[-4:-3] = "1" && "Always On.") ||
          (H[-4:-3] = "2" && "Always Off."),
       `Bottom ASLR`=
          (H[-5:-4] = "1" && "Always On.") ||
          (H[-5:-4] = "2" && "Always Off."),
       `HEASLR`=
          (H[-6:-5] = "1" && "Always On.") ||
          (H[-6:-5] = "2" && "Always Off."),
       `Strict handle checks`=
          (H[-7:-6] = "1" && "Always On.") ||
          (H[-7:-6] = "2" && "Always Off."),
       `Win32k system call disable policy`=
          (H[-8:-7] = "1" && "Always On.") ||
          (H[-8:-7] = "2" && "Always Off."),
       `Extension point disable policy`=
          (H[-9:-8] = "1" && "Always On.") ||
          (H[-9:-8] = "2" && "Always Off."),
       `Dynamic code policy (probably).`=
          (H[-10:-9] = "1" && "Always On.") ||
          (H[-10:-9] = "2" && "Always Off.") ||
          (H[-10:-9] = "3" && "Always On with optout."),
       `Control Flow Guard (CFG)`=
          (H[-11:-10] = "1" && "Enable") ||
          (H[-11:-10] = "2" && "Disable"),
       `Binary signature policy.`=
          (H[-12:-11] = "1" && "Microsoft signed only.") ||
          (H[-12:-11] = "2" && "Disable?"),
       `Font loading prevention.`=
          (H[-13:-12] = "1" && "Enable") ||
          (H[-13:-12] = "2" && "Disable") ||
          (H[-13:-12] = "3" && "Enable with Audit"),
       `Image load policy (remote images).`=
          (H[-14:-13] = "1" && "Always On") ||
          (H[-14:-13] = "2" && "Always Off") ||
          (H[-14:-13] = "3" && "Reserved"),
       `Image load policy (low mandatory label).`=
          (H[-15:-14] = "1" && "Always On") ||
          (H[-15:-14] = "2" && "Always Off") ||
          (H[-15:-14] = "3" && "Reserved")))
  Details: |
    x=>dict(ProcName=x.OSPath[-2],
            DecValue=x.Data,
            HexValue=format(format="%#015x", args=x.Data),
            Parsed=ParseMitigationOptions(H=format(format="%#015x", args=x.Data)))
